# MeetSpace Manager

## Overview
This project provides a RESTful API for managing user registrations, room bookings, and scheduling time slots in a room booking system. The API includes endpoints for user authentication, room management, slot management, and booking management, with role-based access control for different actions.

### Project overview Video Link : https://www.youtube.com/watch?v=D6_CtVC-V1Q

## Features
1. User authentication (sign up and login)
2. Role-based access control (Admin and User roles)
3. CRUD operations for rooms
4. Slot creation and availability checking
5. Room booking management

## Technology Stack
* Node.js
* Express.js
* MongoDB
* JWT (JSON Web Tokens) for authentication
* Mongoose (for MongoDB object modeling)

## Getting Started
Prerequisites
Make sure you have the following installed:

* Node.js
* MongoDB

## Installation
1. Clone the repository:

```git clone https://github.com/MaowaRisa/MeetSpace-Manager.git```
2. Install dependencies:
```cd MeetSpace-Manager```
```npm install```
3. Set up environment variables:
Create a .env file in the root directory and add the following variables:

`NODE_ENV=development`
`PORT=5000`
`DATABASE_URL=mongodb://localhost:27017/roomBookingDB`
`JWT_ACCESS_SECRET=your_jwt_secret`
`JWT_ACCESS_EXPIRES_IN=10d`
`BCRYPT_SALT_ROUNDS= `
4. Start the server:

`npm start`
The API will be available at http://localhost:5000.

## Usage
1. User Routes
* Sign Up
Route: /api/auth/signup
Method: POST

* Login
Route: /api/auth/login
Method: POST

2. Room Routes
* Create Room
Route: /api/rooms
Method: POST
* Get All Rooms
Route: /api/rooms
Method: GET
* Get Room by ID

Route: /api/rooms/:id
Method: GET
* Update Room

Route: /api/rooms/:id
Method: PUT
* Delete Room

Route: /api/rooms/:id
Method: DELETE
3. Slot Routes
* Create Slot

Route: /api/slots
Method: POST
* Get Available Slots

Route: /api/slots/available
Method: GET
4. Booking Routes
* Create Booking

Route: /api/bookings
Method: POST
* Get User Bookings

Route: /api/bookings/user
Method: GET

## Authorization
The API uses JSON Web Tokens (JWT) for authentication and authorization. Users must include a valid JWT token in the Authorization header of requests to access protected routes. Different roles (Admin and User) have different levels of access to various endpoints.

## Linting 
to check the errors
```npm run lint```
for fix use 
```npm run lint:fix```

# Formatting
format the code using prettier
```npm run prettier```
to fix
```npm run prettier:fix```

In this project, I have meticulously followed several best practices and guidelines to ensure high-quality code:

### Coding Quality
#### Clean and Modular Code: 
The code is organized into modular components, each responsible for a specific functionality.
#### Consistent Naming Conventions: 
Variables, functions, and routes are named consistently and meaningfully to reflect their purpose.
#### Readability: 
Efforts have been made to ensure the code is easily readable and maintainable.

#### Inline Comments: 
Complex sections of code or logic are accompanied by inline comments to enhance understanding.

### API Endpoint Adherence
#### Strict Adherence to Structure: 
The API endpoints strictly follow the provided structure and naming conventions.
#### Request and Response Formats: 
All request and response formats match the specifications outlined in the assignment.

### Validation and Error Handling
#### Validation: 
Implemented validation using Zod for both product and order data.
#### Graceful Error Handling: 
Validation errors are handled gracefully, providing meaningful error messages in API responses.
#### Specific Error Scenarios: 
Error handling is implemented for scenarios such as product not found and validation errors.

### Coding Tools and Libraries
#### Manual Code Writing: 
No AI tools or libraries were used for generating code. All code is written manually to demonstrate a clear understanding of the concepts.

#### Specified Libraries: 
Only specified libraries like Express, Mongoose, and Zod are used, avoiding unnecessary dependencies.


### Commit History:
The GitHub repository contains commits, documenting the development process.The project maintains a high standard of coding quality, readability, and functionality.